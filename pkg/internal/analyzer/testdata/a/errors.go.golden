// Copyright 2024-2025 Oliver Eikemeier. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

package a

import (
	"errors"
	. "errors"
	"fmt"

	xerrors "golang.org/x/exp/errors"
)

type myErrors struct{}

func (myErrors) Is(_, _ error) bool {
	return false
}

var myErrs = myErrors{}

func IgnoreErrors() {
	if errors.Is(ErrOne, nil) {
		fmt.Println("nil")
	}

	var oneErr typedError[int] // want " \\(zl:var\\)$"
	if errors.As(ErrOne, &oneErr) {
		fmt.Println("ErrOne is typedError[int]")
	}

	func() {
		errors := myErrs
		if errors.Is(ErrOne, ErrTwo) {
			fmt.Println("one is two")
		}
		if Is(ErrOne, ErrTwo) { // want " \\(zl:cmp\\)$"
			fmt.Println("one is two")
		}
	}()

	if xerrors.Is(func() error { // want " \\(zl:cme\\)$"
		return ErrOne
	}(), ErrTwo) {
		fmt.Println("equal")
	}

	_ = errors.Is(ErrOne, error(ErrTwo))                // want " \\(zl:cme\\)$"
	_ = errors.Is(error(ErrTwo), typedError[float64]{}) // want " \\(zl:add\\)$" " \\(zl:cme\\)$"

	if errors.Is(ErrOne, (typedError[int]{})) { // want " \\(zl:cmp\\)$" " \\(zl:add\\)$"
		fmt.Println("equal")
	}

	if errors.Is(ErrOne, typedError[int]{}) { // want " \\(zl:cmp\\)$" " \\(zl:new\\)$"
		fmt.Println("equal")
	}

	a := typedError[int]{}
	current := func(_, _ int) typedError[int] { return typedError[int]{} } // want " \\(zl:res\\)$" " \\(zl:add\\)$"
	old := func(_ int) typedError[int] { return typedError[int]{} }        // want " \\(zl:res\\)$" " \\(zl:add\\)$"
	new := func(_ int) typedError[int] { return typedError[int]{} }        // want " \\(zl:res\\)$" " \\(zl:add\\)$"
	_ = errors.Is(ErrOne, a)                                               // want " \\(zl:add\\)$" " \\(zl:cmp\\)$"
	_ = errors.Is(ErrOne, (current)(0, 0))                                 // want " \\(zl:cmp\\)$"
	_ = errors.Is(ErrOne, (old)(0))                                        // want " \\(zl:cmp\\)$"
	_ = errors.Is(ErrOne, (new)(0))                                        // want " \\(zl:cmp\\)$"

	var err typedError[int] // want " \\(zl:var\\)$"
	_ = errors.As(ErrOne, &err)

	_ = errors.Join(ErrOne, ErrTwo)

	_ = errors.Unwrap(ErrOne)

	_ = (any)(nil) == ErrOne              // want " \\(zl:cmi\\)$"
	_ = (any)(nil) == (typedError[int]{}) // want " \\(zl:cmi\\)$" " \\(zl:add\\)$"
}
